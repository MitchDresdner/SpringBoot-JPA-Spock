#
spring.main.show-banner=true


# Web Properties
# Override the default HTTP port connection
server.port=8000

# Thyme leaf
#spring.thymeleaf.cache = false

# GSP
# spring.groovy.template.cache = false

# 
# Spring datasource convention
# using the spring-boot-starter-jdbc or spring-boot-starter-data-jpa ‘starters’ will automatically 
# create a dependency to the tomcat-jdbc pooling connector
spring.datasource.url=jdbc:mysql://localhost/mule
spring.datasource.username=muser
spring.datasource.password=mulepw
# Usually, don’t need to specify the driver-class-name since Spring boot can deduce it for most databases from the url.
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Works with - 
#jdbc.driverClassName = com.mysql.jdbc.Driver
#jdbc.url = jdbc:mysql://localhost:3306/mule
#jdbc.username = muser
#jdbc.password = mulepw

# Spring Boot can auto-configure embedded H2, HSQL and Derby databases. 
# No need to provide any connection URLs, simply include a build dependency to the embedded database used
#jdbc.driverClassName = org.h2.Driver
#jdbc.url = jdbc:h2:~/test
#jdbc.url = jdbc:h2:tcp://localhost/~/test
#jdbc.username = sa
#jdbc.password =

# To enable H2 web console
# spring.h2.console.enabled = true

# default the console will be available at /h2-console - customize the console’s path using
# spring.h2.console.path = /foo/bar

# Using jndi to configure PROD data source i.e.
# spring.datasource.jndi-name=java:jboss/datasources/customers

#
# Using (2) entity managers
# see: http://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html
# 75.7

# Define jpa database [H2, MYSQL, ...]
# spring.jpa.database=H2

# Automatic DDL creation
# A file named import.sql in the root of the classpath will be executed on startup
# http://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html

# Hibernate
#
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
#
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# The SQL dialect makes Hibernate generate better SQL for the chosen database
# org.hibernate.dialect.PostgreSQLDialect
# org.hibernate.dialect.H2Dialect
#
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.dialect = org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.dialect = org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.show_sql = true
spring.jpa.hibernate.format_sql = false

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true


# Spring Boot Log levels [TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF]
# logging properties specified by environment: logging.config
# 
#logging.file = log.txt
#logging.path = /home/user/logs/log.txt
logging.level.root=WARN
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=ERROR
logging.level.org.hibernate=info
logging.level.org.apache.camel=info
logging.level.org.springframework=info


# Spring ecurity
# When Spring Security is on the classpath and basic auth is enabled, the H2 console will be automatically secured 
# using basic auth. The following properties can be used to customize the security configuration
# security.user.role
# security.basic.authorize-mode
# security.basic.enabled